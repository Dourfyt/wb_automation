#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ HTTP API
"""

import requests
import json

def test_http_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º HTTP API"""
    base_url = "http://localhost:8000"
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP API...")
    
    # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
    print("\n1Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏...")
    try:
        response = requests.get(f"{base_url}/api/queue")
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code == 200:
            data = response.json()
            print(f"–ó–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏: {len(data.get('tasks', []))}")
            for task in data.get('tasks', []):
                print(f"  - –ó–∞–¥–∞—á–∞ {task.get('id')}: {task.get('article')}")
        else:
            print(f"–û—à–∏–±–∫–∞: {response.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return
    
    # –¢–µ—Å—Ç 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤
    print("\n2Ô∏è‚É£ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤...")
    try:
        response = requests.post(f"{base_url}/api/orders/add")
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code == 200:
            data = response.json()
            print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–¥–∞—á: {len(data.get('task_ids', []))}")
        else:
            print(f"–û—à–∏–±–∫–∞: {response.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ —Å–Ω–æ–≤–∞
    print("\n3Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è...")
    try:
        response = requests.get(f"{base_url}/api/queue")
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code == 200:
            data = response.json()
            tasks = data.get('tasks', [])
            print(f"–ó–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏: {len(tasks)}")
            
            # –¢–µ—Å—Ç 4: –£–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–∏
            if tasks:
                task_id = tasks[0]['id']
                print(f"\n4Ô∏è‚É£ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ {task_id}...")
                
                delete_response = requests.delete(f"{base_url}/api/queue/task/{task_id}")
                print(f"–°—Ç–∞—Ç—É—Å —É–¥–∞–ª–µ–Ω–∏—è: {delete_response.status_code}")
                if delete_response.status_code == 200:
                    data = delete_response.json()
                    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {data.get('message')}")
                else:
                    print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {delete_response.text}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞
                print(f"\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è...")
                check_response = requests.get(f"{base_url}/api/queue")
                if check_response.status_code == 200:
                    check_data = check_response.json()
                    remaining_tasks = check_data.get('tasks', [])
                    print(f"–ó–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {len(remaining_tasks)}")
                    
                    if len(remaining_tasks) == len(tasks) - 1:
                        print("‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!")
                    else:
                        print("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞")
        else:
            print(f"–û—à–∏–±–∫–∞: {response.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    test_http_api() 