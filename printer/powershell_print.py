#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø–µ—á–∞—Ç–∏ —á–µ—Ä–µ–∑ PowerShell
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç PowerShell –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä—è–º–æ–π –ø–µ—á–∞—Ç–∏ —Ñ–∞–π–ª–æ–≤
"""

import os
import subprocess
import platform
from pathlib import Path
from typing import List, Dict, Optional


class PowerShellPrinter:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞–º–∏ —á–µ—Ä–µ–∑ PowerShell"""
    
    def __init__(self):
        self.available = platform.system() == "Windows"
        
    def get_printers(self) -> List[Dict[str, str]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ PowerShell"""
        if not self.available:
            return []
            
        try:
            cmd = [
                "powershell", 
                "-Command", 
                "Get-Printer | Select-Object Name, DriverName, PortName | ConvertTo-Json"
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=10)
            
            if result.returncode == 0:
                import json
                printers_data = json.loads(result.stdout)
                if isinstance(printers_data, list):
                    return printers_data
                else:
                    return [printers_data]
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤: {result.stderr}")
                return []
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤: {e}")
            return []
            
    def get_default_printer(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —á–µ—Ä–µ–∑ PowerShell"""
        if not self.available:
            return None
            
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–Ω—Ç–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            cmd = [
                "powershell", 
                "-Command", 
                "Get-Printer | Where-Object {$_.Default -eq $true} | Select-Object -ExpandProperty Name"
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=10)
            
            if result.returncode == 0 and result.stdout.strip():
                return result.stdout.strip()
                
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–∏–Ω—Ç–µ—Ä
            print("‚ö†Ô∏è –ü—Ä–∏–Ω—Ç–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π")
            printers = self.get_printers()
            if printers:
                return printers[0].get('Name', 'HP DeskJet 2300 series')
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {result.stderr}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {e}")
            return None
            
    def print_file(self, file_path: str, printer_name: Optional[str] = None) -> bool:
        """
        –ü–µ—á–∞—Ç–∞–µ—Ç —Ñ–∞–π–ª —á–µ—Ä–µ–∑ PowerShell
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –ø–µ—á–∞—Ç–∏
            printer_name: –ò–º—è –ø—Ä–∏–Ω—Ç–µ—Ä–∞ (–µ—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏–Ω—Ç–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏
        """
        if not self.available:
            print("‚ùå –ü–µ—á–∞—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–Ω–µ Windows)")
            return False
            
        if not os.path.exists(file_path):
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            return False
            
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–Ω—Ç–µ—Ä
            if not printer_name:
                printer_name = self.get_default_printer()
                if not printer_name:
                    print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏–Ω—Ç–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                    return False
                    
            print(f"üñ®Ô∏è –ü–µ—á–∞—Ç–∞–µ–º {file_path} –Ω–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–µ {printer_name}")
            
            # –°–æ–∑–¥–∞–µ–º PowerShell –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–µ—á–∞—Ç–∏
            if file_path.lower().endswith(('.png', '.jpg', '.jpeg', '.bmp', '.gif')):
                # –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º Start-Process —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—á–∞—Ç—å—é
                ps_command = f"""
                $file = "{file_path}"
                $printer = "{printer_name}"
                Start-Process -FilePath $file -Verb Print -PassThru
                Write-Host "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø–µ—á–∞—Ç—å: $file"
                """
            else:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ø–µ—á–∞—Ç—å
                ps_command = f"""
                $file = "{file_path}"
                $printer = "{printer_name}"
                Start-Process -FilePath $file -Verb Print -PassThru
                Write-Host "–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–µ—á–∞—Ç—å: $file"
                """
                
            # –í—ã–ø–æ–ª–Ω—è–µ–º PowerShell –∫–æ–º–∞–Ω–¥—É
            cmd = [
                "powershell", 
                "-Command", 
                ps_command
            ]
            
            print(f"üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É PowerShell –¥–ª—è –ø–µ—á–∞—Ç–∏...")
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=60)
            
            if result.returncode == 0:
                print(f"‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–µ—á–∞—Ç—å: {file_path}")
                print(f"üìã –í—ã–≤–æ–¥ PowerShell: {result.stdout}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏ PowerShell: {result.stderr}")
                return False
                
        except subprocess.TimeoutExpired:
            print(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø–µ—á–∞—Ç–∏: {file_path}")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏: {e}")
            return False
            
    def print_file_alternative(self, file_path: str, printer_name: Optional[str] = None) -> bool:
        """
        –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–µ—á–∞—Ç–∏ —á–µ—Ä–µ–∑ rundll32
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            printer_name: –ò–º—è –ø—Ä–∏–Ω—Ç–µ—Ä–∞
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏
        """
        if not self.available:
            return False
            
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–Ω—Ç–µ—Ä
            if not printer_name:
                printer_name = self.get_default_printer()
                if not printer_name:
                    print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏–Ω—Ç–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                    return False
                    
            print(f"üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø–µ—á–∞—Ç—å: {file_path} –Ω–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–µ {printer_name}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º rundll32 –¥–ª—è –ø–µ—á–∞—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            cmd = [
                "rundll32", 
                "shimgvw.dll,ImageView_PrintTo", 
                file_path, 
                printer_name
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
            
            if result.returncode == 0:
                print(f"‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–µ—á–∞—Ç—å (rundll32): {file_path}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏ rundll32: {result.stderr}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –ø–µ—á–∞—Ç–∏: {e}")
            return False


def print_file_powershell(file_path: str, printer_name: Optional[str] = None) -> bool:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—á–∞—Ç–∏ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ PowerShell
    
    Args:
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        printer_name: –ò–º—è –ø—Ä–∏–Ω—Ç–µ—Ä–∞
        
    Returns:
        bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏
    """
    printer = PowerShellPrinter()
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º PowerShell
    if printer.print_file(file_path, printer_name):
        return True
        
    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
    return printer.print_file_alternative(file_path, printer_name)


def get_powershell_printers() -> List[Dict[str, str]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ PowerShell
    
    Returns:
        List[Dict[str, str]]: –°–ø–∏—Å–æ–∫ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
    """
    printer = PowerShellPrinter()
    return printer.get_printers()


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    printer = PowerShellPrinter()
    
    print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–Ω—Ç–µ—Ä—ã:")
    printers = printer.get_printers()
    for p in printers:
        print(f"  - {p.get('Name', 'Unknown')} ({p.get('DriverName', 'Unknown')})")
        
    default = printer.get_default_printer()
    print(f"üñ®Ô∏è –ü—Ä–∏–Ω—Ç–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default}")
    
    # –¢–µ—Å—Ç –ø–µ—á–∞—Ç–∏
    test_file = "for_print/test-article-001/–ü–ï–ß–ê–¢–¨.png"
    if os.path.exists(test_file):
        print(f"üñ®Ô∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—á–∞—Ç—å: {test_file}")
        success = printer.print_file(test_file)
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if success else '‚ùå –û—à–∏–±–∫–∞'}")
    else:
        print(f"‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_file}") 