#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø–µ—á–∞—Ç–∏ –≤ Windows
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç win32print –¥–ª—è –ø—Ä—è–º–æ–π –ø–µ—á–∞—Ç–∏ —Ñ–∞–π–ª–æ–≤
"""

import os
import sys
import subprocess
import platform
from pathlib import Path
from typing import List, Dict, Optional

try:
    import win32print
    import win32api
    import win32con
    WINDOWS_PRINT_AVAILABLE = True
except ImportError:
    WINDOWS_PRINT_AVAILABLE = False
    print("‚ö†Ô∏è win32print –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pywin32")


class WindowsPrinter:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞–º–∏ –≤ Windows"""
    
    def __init__(self):
        self.available = WINDOWS_PRINT_AVAILABLE and platform.system() == "Windows"
        
    def get_printers(self) -> List[Dict[str, str]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤"""
        if not self.available:
            return []
            
        try:
            printers = []
            for printer in win32print.EnumPrinters(win32print.PRINTER_ENUM_LOCAL, None, 1):
                printers.append({
                    "name": printer[2],
                    "port": printer[1],
                    "description": printer[3] if len(printer) > 3 else ""
                })
            return printers
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤: {e}")
            return []
            
    def get_default_printer(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        if not self.available:
            return None
            
        try:
            return win32print.GetDefaultPrinter()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {e}")
            return None
            
    def print_file(self, file_path: str, printer_name: Optional[str] = None) -> bool:
        """
        –ü–µ—á–∞—Ç–∞–µ—Ç —Ñ–∞–π–ª –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø—Ä–∏–Ω—Ç–µ—Ä–µ
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –ø–µ—á–∞—Ç–∏
            printer_name: –ò–º—è –ø—Ä–∏–Ω—Ç–µ—Ä–∞ (–µ—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏–Ω—Ç–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏
        """
        if not self.available:
            print("‚ùå –ü–µ—á–∞—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–Ω–µ Windows –∏–ª–∏ win32print –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)")
            return False
            
        if not os.path.exists(file_path):
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            return False
            
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–Ω—Ç–µ—Ä
            if not printer_name:
                printer_name = self.get_default_printer()
                if not printer_name:
                    print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏–Ω—Ç–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                    return False
                    
            print(f"üñ®Ô∏è –ü–µ—á–∞—Ç–∞–µ–º {file_path} –Ω–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–µ {printer_name}")
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–Ω—Ç–µ—Ä
            printer_handle = win32print.OpenPrinter(printer_name)
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–Ω—Ç–µ—Ä–µ
                printer_info = win32print.GetPrinter(printer_handle, 2)
                
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
                doc_info = ('Print Job', None, 'RAW')
                job_id = win32print.StartDocPrinter(printer_handle, 1, doc_info)
                
                try:
                    # –ù–∞—á–∏–Ω–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    win32print.StartPagePrinter(printer_handle)
                    
                    # –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º ShellExecute
                    if file_path.lower().endswith(('.png', '.jpg', '.jpeg', '.bmp', '.gif')):
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ShellExecute –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                        win32api.ShellExecute(
                            0, 
                            "print", 
                            file_path, 
                            None, 
                            ".", 
                            0
                        )
                    else:
                        # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º ShellExecute —Å print
                        win32api.ShellExecute(
                            0, 
                            "print", 
                            file_path, 
                            f'"{printer_name}"', 
                            ".", 
                            0
                        )
                    
                    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    win32print.EndPagePrinter(printer_handle)
                    
                finally:
                    # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
                    win32print.EndDocPrinter(printer_handle)
                    
            finally:
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–Ω—Ç–µ—Ä
                win32print.ClosePrinter(printer_handle)
                
            print(f"‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–µ—á–∞—Ç—å: {file_path}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏: {e}")
            return False
            
    def print_file_simple(self, file_path: str, printer_name: Optional[str] = None) -> bool:
        """
        –ü—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –ø–µ—á–∞—Ç–∏ —á–µ—Ä–µ–∑ ShellExecute
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            printer_name: –ò–º—è –ø—Ä–∏–Ω—Ç–µ—Ä–∞
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏
        """
        if not self.available:
            return False
            
        try:
            # –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ win32print
            if file_path.lower().endswith(('.png', '.jpg', '.jpeg', '.bmp', '.gif')):
                return self._print_image_direct(file_path, printer_name)
            else:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º ShellExecute
                if printer_name:
                    win32api.ShellExecute(
                        0, 
                        "print", 
                        file_path, 
                        f'"{printer_name}"', 
                        ".", 
                        0
                    )
                else:
                    win32api.ShellExecute(
                        0, 
                        "print", 
                        file_path, 
                        None, 
                        ".", 
                        0
                    )
                    
                print(f"‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–µ—á–∞—Ç—å (ShellExecute): {file_path}")
                return True
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ–π –ø–µ—á–∞—Ç–∏: {e}")
            return False
            
    def _print_image_direct(self, file_path: str, printer_name: Optional[str] = None) -> bool:
        """
        –ü—Ä—è–º–∞—è –ø–µ—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ win32print
        
        Args:
            file_path: –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            printer_name: –ò–º—è –ø—Ä–∏–Ω—Ç–µ—Ä–∞
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–Ω—Ç–µ—Ä
            if not printer_name:
                printer_name = self.get_default_printer()
                if not printer_name:
                    print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏–Ω—Ç–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                    return False
                    
            print(f"üñ®Ô∏è –ü—Ä—è–º–∞—è –ø–µ—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {file_path} –Ω–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–µ {printer_name}")
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–Ω—Ç–µ—Ä
            printer_handle = win32print.OpenPrinter(printer_name)
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–Ω—Ç–µ—Ä–µ
                printer_info = win32print.GetPrinter(printer_handle, 2)
                
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
                doc_info = ('Print Job', None, 'RAW')
                job_id = win32print.StartDocPrinter(printer_handle, 1, doc_info)
                
                try:
                    # –ù–∞—á–∏–Ω–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    win32print.StartPagePrinter(printer_handle)
                    
                    # –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º ShellExecute —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—á–∞—Ç—å—é
                    # –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –ø—Ä–∏–Ω—Ç–µ—Ä–∞
                    win32api.ShellExecute(
                        0, 
                        "print", 
                        file_path, 
                        f'"{printer_name}"', 
                        ".", 
                        0
                    )
                    
                    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    win32print.EndPagePrinter(printer_handle)
                    
                finally:
                    # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
                    win32print.EndDocPrinter(printer_handle)
                    
            finally:
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–Ω—Ç–µ—Ä
                win32print.ClosePrinter(printer_handle)
                
            print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø–µ—á–∞—Ç—å: {file_path}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–π –ø–µ—á–∞—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return False


def print_file_windows(file_path: str, printer_name: Optional[str] = None) -> bool:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—á–∞—Ç–∏ —Ñ–∞–π–ª–∞ –≤ Windows
    
    Args:
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        printer_name: –ò–º—è –ø—Ä–∏–Ω—Ç–µ—Ä–∞
        
    Returns:
        bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏
    """
    printer = WindowsPrinter()
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–±
    if printer.print_file_simple(file_path, printer_name):
        return True
        
    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º —Å–ª–æ–∂–Ω—ã–π —Å–ø–æ—Å–æ–±
    return printer.print_file(file_path, printer_name)


def get_windows_printers() -> List[Dict[str, str]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ Windows
    
    Returns:
        List[Dict[str, str]]: –°–ø–∏—Å–æ–∫ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
    """
    printer = WindowsPrinter()
    return printer.get_printers()


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    printer = WindowsPrinter()
    
    print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–Ω—Ç–µ—Ä—ã:")
    printers = printer.get_printers()
    for p in printers:
        print(f"  - {p['name']} ({p['port']})")
        
    default = printer.get_default_printer()
    print(f"üñ®Ô∏è –ü—Ä–∏–Ω—Ç–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default}")
    
    # –¢–µ—Å—Ç –ø–µ—á–∞—Ç–∏
    test_file = r"F:\wb_automation\for_print\test-article-001\–ü–ï–ß–ê–¢–¨.png"
    if os.path.exists(test_file):
        print(f"üñ®Ô∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—á–∞—Ç—å: {test_file}")
        success = printer.print_file_simple(test_file)
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if success else '‚ùå –û—à–∏–±–∫–∞'}")
    else:
        print(f"‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_file}") 