#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –ø–µ—á–∞—Ç–∏:
1. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –≤ –æ—á–µ—Ä–µ–¥—å
2. –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –ø–µ—á–∞—Ç–∏
3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á
4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Excel –æ—Ç—á–µ—Ç–∞
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
# sys.path.append(str(Path(__file__).parent))

from printer.add_to_print import add_orders_to_print_queue, setup_printers
from printer.excel import create_print_status_report
from printer.print_processor import start_print_processor


async def demo_full_cycle():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
    
    print("üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –ü–ï–ß–ê–¢–ò")
    print("=" * 50)
    
    # –®–∞–≥ 1: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
    print("\n1Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤...")
    await setup_printers()
    
    # –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ Excel –æ—Ç—á–µ—Ç–∞
    print("\n2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ Excel –æ—Ç—á–µ—Ç–∞...")
    excel_file = await create_print_status_report()
    print(f"   üìä –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {excel_file}")
    
    # –®–∞–≥ 3: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –≤ –æ—á–µ—Ä–µ–¥—å
    print("\n3Ô∏è‚É£ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –≤ –æ—á–µ—Ä–µ–¥—å...")
    task_ids = await add_orders_to_print_queue()
    print(f"   üìã –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–¥–∞—á: {len(task_ids)}")
    for task_id in task_ids:
        print(f"      - {task_id}")
    
    # –®–∞–≥ 4: –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –ø–µ—á–∞—Ç–∏
    print("\n4Ô∏è‚É£ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –ø–µ—á–∞—Ç–∏...")
    print("   üñ®Ô∏è –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥")
    print("   ‚èπÔ∏è –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    
    try:
        await start_print_processor()
    except KeyboardInterrupt:
        print("\nüëã –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    print("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")


async def demo_without_redis():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–µ–∑ Redis (—Ç–æ–ª—å–∫–æ Excel –æ—Ç—á–µ—Ç)"""
    
    print("üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ë–ï–ó REDIS")
    print("=" * 40)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ Excel –æ—Ç—á–µ—Ç–∞
    print("\n1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ Excel –æ—Ç—á–µ—Ç–∞...")
    try:
        excel_file = await create_print_status_report()
        print(f"   üìä –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {excel_file}")
        print("   üü° –ñ–µ–ª—Ç—ã–π —Ü–≤–µ—Ç - –Ω–µ —Ä–∞—Å–ø–µ—á–∞—Ç–∞–Ω–Ω—ã–µ –∞—Ä—Ç–∏–∫—É–ª—ã")
        print("   üü¢ –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç - —Ä–∞—Å–ø–µ—á–∞—Ç–∞–Ω–Ω—ã–µ –∞—Ä—Ç–∏–∫—É–ª—ã")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description="–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–µ—á–∞—Ç–∏")
    parser.add_argument(
        "--no-redis", 
        action="store_true", 
        help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é –±–µ–∑ Redis (—Ç–æ–ª—å–∫–æ Excel)"
    )
    
    args = parser.parse_args()
    
    if args.no_redis:
        asyncio.run(demo_without_redis())
    else:
        asyncio.run(demo_full_cycle()) 