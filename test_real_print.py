#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—á–∞—Ç–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–Ω—Ç–µ—Ä–∞—Ö –∏–∑ —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø—ã
"""

import asyncio
import json
import uuid
from datetime import datetime
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
import sys
sys.path.append(str(Path(__file__).parent))

from printer.add_to_print import PrintQueueManager

async def test_real_print():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—á–∞—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–Ω—Ç–µ—Ä–∞—Ö"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—á–∞—Ç–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–Ω—Ç–µ—Ä–∞—Ö...")
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –æ—á–µ—Ä–µ–¥–∏
    queue_manager = PrintQueueManager()
    await queue_manager.connect()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É
    order_data = {
        "id": "test_order_001",
        "article": "test-article-001"
    }
    
    print(f"üìã –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø–µ—á–∞—Ç–∏")
    task_id = await queue_manager.add_to_queue("for_print/test-article-001/–ü–ï–ß–ê–¢–¨.png", order_data)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞
    if queue_manager.redis:
        tasks = await queue_manager.redis.zrange(queue_manager.queue_name, 0, -1)
        print(f"üìã –ó–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏: {len(tasks)}")
    else:
        print("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –ø–µ—á–∞—Ç–∏
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –ø–µ—á–∞—Ç–∏...")
    from printer.print_processor import PrintProcessor
    
    processor = PrintProcessor()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
    try:
        await asyncio.wait_for(processor.start_processing(check_interval=2), timeout=10)
    except asyncio.TimeoutError:
        print("‚è∞ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É")
    finally:
        processor.stop()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
    if queue_manager.redis:
        final_tasks = await queue_manager.redis.zrange(queue_manager.queue_name, 0, -1)
        print(f"üìã –ó–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(final_tasks)}")
    else:
        print("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis")
    
    # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É
    await queue_manager.remove_task(task_id)
    print("üßπ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞")

if __name__ == "__main__":
    asyncio.run(test_real_print()) 